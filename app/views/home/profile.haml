.header-interceptor
  .container.position-relative
    %h1.header-title You

.container.text-sm-center.pt-3
  %h3.flashy preferences
%section.container.profile-settings.py-3
  .row
    .col
      .supersettings{ class: current_user.board_time != 'always' ? 'extra-time' : '' }
        %p
          = "Your HomeBoard will "
          = "#{render partial: '/home/parts/board_time_selector'}".html_safe
          = "be #{render partial: '/home/parts/board_selector'}".html_safe
          %span.unless
            = 'unless'
          %span.extra
            = "on #{render partial: '/home/parts/extra_time_selector'} it will be".html_safe
          = "#{render partial: '/home/parts/extra_board_selector'}".html_safe
        %p= "This is enjoyed in the #{render partial: '/home/parts/theme_selector'} Theme.".html_safe
  .row.logout
    .col
      = link_to destroy_user_session_path, method: :delete do
        %button.btn.btn-block.btn-success Logout

.container.text-sm-center.pt-3
  %h3.flashy Boards
%section.container.list-section
  = link_to new_board_path, class: 'icon-link add-link', remote: true do
    = inline_svg_tag('icons/add.svg', class: 'add-icon icon')
  .row.no-gutters
    .col-12
      .help.with-help-icon.help-section.text-center.mb-2
        = inline_svg_tag('icons/help.svg', class: 'icon help-icon')
        %small boards can only be deleted if empty
      %ul.boardlist.sortable
        - @boards.each_with_sortable_id do |board, sort|
          %li{ id: sort, class: "board-#{board.id}" }
            = board.title + " (#{board.lists.count})"
            - if board.lists.empty?
              = link_to board_path(board), method: :delete, remote: true, class: 'remove icon-link' do
                = inline_svg_tag('icons/delete.svg', class: 'icon closer-icon')
            - else
              %ul.listlist.sortable.pl-3
                - board.lists.each do |list|
                  %li{ id: list.sortable_id, class: (list.tasks.any? || list.lnks.any?) ? "with-child list-#{list.id}" : "list-#{list.id}" }
                    = list.title
                    = link_to list_path(list), method: :delete, remote: true, class: 'remove icon-link' do
                      = inline_svg_tag('icons/delete.svg', class: 'icon closer-icon')

:javascript
  $('.sortable').railsSortable();

  $('.supersettings #board-time').on('change', function(e) {
    if ($(e.target).val() == 'always') {
      $(e.target).parents('.supersettings').removeClass('extra-time');
      $(e.target).attr('disabled', true);
    }
  })
  $('.supersettings .unless').click( function(e) {
    $(e.target).parents('.supersettings').addClass('extra-time');
    $(e.target).siblings('#board-time').attr('disabled', false);
    $(e.target).siblings('#board-time').val('workdays');
    $(e.target).siblings('#board-time').trigger('change');
  });

  $('.supersettings select').on('change', function(e) {
    var settings = {
      'board_time': $('.supersettings #board-time').val(),
      'home_board_id': $('.supersettings #home-board').val(),
      'extra_time': $('.supersettings #extra-time').val(),
      'extra_board_id': $('.supersettings #extra-board').val(),
      'theme': $('.supersettings #pref-theme').val()
    };
    $.ajax({
      url: "/set_tings/" + encodeURIComponent(JSON.stringify(settings)),
      method: "PATCH"
    });
    if (settings['theme']) {
      $('html').removeClass('raw');
      $('html').removeClass('groovy');
      $('html').removeClass('bubblegum');

      $('html').addClass(settings['theme']);
    }
  });
